// Code generated by mockery v1.0.0. DO NOT EDIT.

package kail

import context "context"
import corev1alpha1 "github.com/projectriff/system/pkg/apis/core/v1alpha1"
import io "io"

import knativev1alpha1 "github.com/projectriff/system/pkg/apis/knative/v1alpha1"
import mock "github.com/stretchr/testify/mock"
import streamingv1alpha1 "github.com/projectriff/system/pkg/apis/streaming/v1alpha1"
import time "time"
import v1alpha1 "github.com/projectriff/system/pkg/apis/build/v1alpha1"

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// ApplicationLogs provides a mock function with given fields: ctx, application, since, out
func (_m *Logger) ApplicationLogs(ctx context.Context, application *v1alpha1.Application, since time.Duration, out io.Writer) error {
	ret := _m.Called(ctx, application, since, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Application, time.Duration, io.Writer) error); ok {
		r0 = rf(ctx, application, since, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoreHandlerLogs provides a mock function with given fields: ctx, handler, since, out
func (_m *Logger) CoreHandlerLogs(ctx context.Context, handler *corev1alpha1.Handler, since time.Duration, out io.Writer) error {
	ret := _m.Called(ctx, handler, since, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1alpha1.Handler, time.Duration, io.Writer) error); ok {
		r0 = rf(ctx, handler, since, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FunctionLogs provides a mock function with given fields: ctx, function, since, out
func (_m *Logger) FunctionLogs(ctx context.Context, function *v1alpha1.Function, since time.Duration, out io.Writer) error {
	ret := _m.Called(ctx, function, since, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Function, time.Duration, io.Writer) error); ok {
		r0 = rf(ctx, function, since, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KnativeHandlerLogs provides a mock function with given fields: ctx, handler, since, out
func (_m *Logger) KnativeHandlerLogs(ctx context.Context, handler *knativev1alpha1.Handler, since time.Duration, out io.Writer) error {
	ret := _m.Called(ctx, handler, since, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *knativev1alpha1.Handler, time.Duration, io.Writer) error); ok {
		r0 = rf(ctx, handler, since, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamingProcessorLogs provides a mock function with given fields: ctx, processor, since, out
func (_m *Logger) StreamingProcessorLogs(ctx context.Context, processor *streamingv1alpha1.Processor, since time.Duration, out io.Writer) error {
	ret := _m.Called(ctx, processor, since, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *streamingv1alpha1.Processor, time.Duration, io.Writer) error); ok {
		r0 = rf(ctx, processor, since, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
