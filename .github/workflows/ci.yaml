name: CI

on: [push, pull_request]

jobs:

  unit:
    name: Unit test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - name: Check out code
      uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Set up Golang
      uses: actions/setup-go@v1
      with:
        go-version: '1.13'
    # TODO remove after https://github.com/actions/setup-go/issues/14
    - name: Add GOPATH/bin to PATH
      run: |
        echo "##[set-env name=GOPATH;]$(go env GOPATH)"
        echo "##[add-path]$(go env GOPATH)/bin"
      shell: bash
    - name: Verify code formatting
      run: |
        go get golang.org/x/tools/cmd/goimports
        make verify-goimports
      shell: bash
      if: success() && runner.os != 'Windows'
    - name: Build
      run: make build
    - name: Unit test
      run: make coverage
    - name: Verify docs
      run: make verify-docs
    - name: Report coverage
      run: curl -s https://codecov.io/bash | bash -s
      shell: bash
      env:
        CODECOV_TOKEN: d09bee7e-6c5a-4316-a48f-266e08d0f70f

  stage:
    name: Stage
    needs: unit
    if: success() && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Set up Golang
      uses: actions/setup-go@v1
      with:
        go-version: '1.13'
    # TODO remove after https://github.com/actions/setup-go/issues/14
    - name: Add GOPATH/bin to PATH
      run: |
        echo "##[set-env name=GOPATH]$(go env GOPATH)"
        echo "##[add-path]$(go env GOPATH)/bin"
      shell: bash
    - name: Stage riff release artifacts
      run: .github/workflows/stage.sh
      env:
        GCLOUD_CLIENT_SECRET: ${{ secrets.GCLOUD_CLIENT_SECRET }}

  fats:
    name: FATS
    needs: stage
    if: success() && github.event_name == 'push'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Setup env'
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            qualifier=minikube
            cluster=minikube
            registry=dockerhub
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            qualifier=windows
            cluster=gke
            registry=gcr
          fi

          job=$(date +%s) # TODO use something that is assigned by CI to guarantee uniqueness
          echo "JOB_ID=${job}"

          echo "##[set-env name=CLUSTER]${cluster}"
          echo "##[set-env name=REGISTRY]${registry}"
          echo "##[set-env name=CLUSTER_NAME]riff-${job}-${qualifier}"
          echo "##[set-env name=NAMESPACE]riff-${job}-${qualifier}"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          GCLOUD_CLIENT_SECRET: ${{ secrets.GCLOUD_CLIENT_SECRET }}
      - name: Run FATS
        run: .github/workflows/fats.sh
        env:
          DOCKER_USERNAME: '$(DockerUsername)'
          DOCKER_PASSWORD: '$(DockerPassword)'
          GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
      - name: 'Collect diagnostics'
        run: |
          kubectl get deployments,services,pods --all-namespaces || true
          echo ""
          echo "RIFF:"
          echo ""
          kubectl get riff --all-namespaces || true
          echo ""
          echo "KNATIVE:"
          echo ""
          kubectl get knative --all-namespaces || true
          echo ""
          echo "FAILING PODS:"
          echo ""
          kubectl get pods --all-namespaces --field-selector=status.phase!=Running \
            | tail -n +2 | awk '{print "-n", $1, $2}' | xargs -L 1 kubectl describe pod || true
          echo ""
          echo "NODE:"
          echo ""
          kubectl describe node || true
          echo ""
          echo "RIFF:"
          echo ""
          kubectl describe riff --all-namespaces || true
          echo ""
          echo "KNATIVE:"
          echo ""
          kubectl describe knative --all-namespaces || true
        if: failure()
      - name: 'Dump riff System logs'
        run: kubectl logs -n riff-system -l app=controller --tail 10000 || true
        if: failure()
      - name: 'Dump Knative Build logs'
        run: kubectl logs -n knative-build -l app=build-controller --tail 10000 || true
        if: failure()
      - name: 'Dump Knative Serving logs'
        run: kubectl logs -n knative-serving -l app=controller --tail 10000 || true
        if: failure()
      - name: Cleanup FATS
        run: .github/workflows/fats-cleanup.sh
        if: always()
        env:
          DOCKER_USERNAME: '$(DockerUsername)'
          DOCKER_PASSWORD: '$(DockerPassword)'
          GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'

  publish:
    name: Publish
    needs: fats
    if: |
      success() && 
      github.event_name == 'push' && (
        github.ref == 'refs/heads/master' || (
          startsWith(github.ref, 'refs/heads/v') && endsWith(github.ref, 'x')
        )
      )
    runs-on: ubuntu-latest
    steps:
    - name: 'Publish riff release artifacts'
      run: .github/workflows/publish.sh ${{ github.ref }}
      env:
        GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
